from __future__ import division
from . import wavefunctions
import cmath


def FFV1_0(F1, F2, V3, COUP):
    TMP0 = (F1[2]*(F2[4]*(V3[2]+V3[5])+F2[5]*(V3[3]+1j*(V3[4])))+(F1[3]*(F2[4]*(V3[3]-1j*(V3[4]))+F2[5]*(V3[2]-V3[5])) +
            (F1[4]*(F2[2]*(V3[2]-V3[5])-F2[3]*(V3[3]+1j*(V3[4])))+F1[5]*(F2[2]*(-V3[3]+1j*(V3[4]))+F2[3]*(V3[2]+V3[5])))))
    vertex = COUP*-1j * TMP0
    return vertex


def FFV1_1(F2, V3, COUP, M1, W1):
    F1 = wavefunctions.WaveFunction(size=6)
    F1[0] = +F2[0]+V3[0]
    F1[1] = +F2[1]+V3[1]
    P1 = [-complex(F1[0]).real, -complex(F1[1]).real, -
          complex(F1[1]).imag, -complex(F1[0]).imag]
    denom = COUP/(P1[0]**2-P1[1]**2-P1[2]**2-P1[3]**2 - M1 * (M1 - 1j * W1))
    F1[2] = denom*1j*(F2[2]*(P1[0]*(-V3[2]+V3[5])+(P1[1]*(V3[3]-1j*(V3[4]))+(P1[2]*(+1j*(V3[3])+V3[4])+P1[3]*(-V3[2]+V3[5]))))+(F2[3]*(P1[0]*(V3[3]+1j*(
        V3[4]))+(P1[1]*(-1)*(V3[2]+V3[5])+(P1[2]*(-1)*(+1j*(V3[2]+V3[5]))+P1[3]*(V3[3]+1j*(V3[4])))))+M1*(F2[4]*(V3[2]+V3[5])+F2[5]*(V3[3]+1j*(V3[4])))))
    F1[3] = denom*(-1j)*(F2[2]*(P1[0]*(-V3[3]+1j*(V3[4]))+(P1[1]*(V3[2]-V3[5])+(P1[2]*(-1j*(V3[2])+1j*(V3[5]))+P1[3]*(V3[3]-1j*(V3[4])))))+(F2[3]*(P1[0]
                                                                                                                                                   * (V3[2]+V3[5])+(P1[1]*(-1)*(V3[3]+1j*(V3[4]))+(P1[2]*(+1j*(V3[3])-V3[4])-P1[3]*(V3[2]+V3[5]))))+M1*(F2[4]*(-V3[3]+1j*(V3[4]))+F2[5]*(-V3[2]+V3[5]))))
    F1[4] = denom*(-1j)*(F2[4]*(P1[0]*(V3[2]+V3[5])+(P1[1]*(-V3[3]+1j*(V3[4]))+(P1[2]*(-1)*(+1j*(V3[3])+V3[4])-P1[3]*(V3[2]+V3[5]))))+(F2[5]*(P1[0] *
                                                                                                                                              (V3[3]+1j*(V3[4]))+(P1[1]*(-V3[2]+V3[5])+(P1[2]*(-1j*(V3[2])+1j*(V3[5]))-P1[3]*(V3[3]+1j*(V3[4])))))+M1*(F2[2]*(-V3[2]+V3[5])+F2[3]*(V3[3]+1j*(V3[4])))))
    F1[5] = denom*1j*(F2[4]*(P1[0]*(-V3[3]+1j*(V3[4]))+(P1[1]*(V3[2]+V3[5])+(P1[2]*(-1)*(+1j*(V3[2]+V3[5]))+P1[3]*(-V3[3]+1j*(V3[4])))))+(F2[5]*(P1[0]
                      * (-V3[2]+V3[5])+(P1[1]*(V3[3]+1j*(V3[4]))+(P1[2]*(-1j*(V3[3])+V3[4])+P1[3]*(-V3[2]+V3[5]))))+M1*(F2[2]*(-V3[3]+1j*(V3[4]))+F2[3]*(V3[2]+V3[5]))))
    return F1


def FFV1_2(F1, V3, COUP, M2, W2):
    F2 = wavefunctions.WaveFunction(size=6)
    F2[0] = +F1[0]+V3[0]
    F2[1] = +F1[1]+V3[1]
    P2 = [-complex(F2[0]).real, -complex(F2[1]).real, -
          complex(F2[1]).imag, -complex(F2[0]).imag]
    denom = COUP/(P2[0]**2-P2[1]**2-P2[2]**2-P2[3]**2 - M2 * (M2 - 1j * W2))
    F2[2] = denom*1j*(F1[2]*(P2[0]*(V3[2]+V3[5])+(P2[1]*(-1)*(V3[3]+1j*(V3[4]))+(P2[2]*(+1j*(V3[3])-V3[4])-P2[3]*(V3[2]+V3[5]))))+(F1[3]*(P2[0]*(V3[3] -
                      1j*(V3[4]))+(P2[1]*(-V3[2]+V3[5])+(P2[2]*(+1j*(V3[2])-1j*(V3[5]))+P2[3]*(-V3[3]+1j*(V3[4])))))+M2*(F1[4]*(V3[2]-V3[5])+F1[5]*(-V3[3]+1j*(V3[4])))))
    F2[3] = denom*(-1j)*(F1[2]*(P2[0]*(-1)*(V3[3]+1j*(V3[4]))+(P2[1]*(V3[2]+V3[5])+(P2[2]*(+1j*(V3[2]+V3[5]))-P2[3]*(V3[3]+1j*(V3[4])))))+(F1[3]*(P2[0]
                                                                                                                                                  * (-V3[2]+V3[5])+(P2[1]*(V3[3]-1j*(V3[4]))+(P2[2]*(+1j*(V3[3])+V3[4])+P2[3]*(-V3[2]+V3[5]))))+M2*(F1[4]*(V3[3]+1j*(V3[4]))-F1[5]*(V3[2]+V3[5]))))
    F2[4] = denom*(-1j)*(F1[4]*(P2[0]*(-V3[2]+V3[5])+(P2[1]*(V3[3]+1j*(V3[4]))+(P2[2]*(-1j*(V3[3])+V3[4])+P2[3]*(-V3[2]+V3[5]))))+(F1[5]*(P2[0]*(V3[3] -
                                                                                                                                                 1j*(V3[4]))+(P2[1]*(-1)*(V3[2]+V3[5])+(P2[2]*(+1j*(V3[2]+V3[5]))+P2[3]*(V3[3]-1j*(V3[4])))))+M2*(F1[2]*(-1)*(V3[2]+V3[5])+F1[3]*(-V3[3]+1j*(V3[4])))))
    F2[5] = denom*1j*(F1[4]*(P2[0]*(-1)*(V3[3]+1j*(V3[4]))+(P2[1]*(V3[2]-V3[5])+(P2[2]*(+1j*(V3[2])-1j*(V3[5]))+P2[3]*(V3[3]+1j*(V3[4])))))+(F1[5]*(P2[0]
                      * (V3[2]+V3[5])+(P2[1]*(-V3[3]+1j*(V3[4]))+(P2[2]*(-1)*(+1j*(V3[3])+V3[4])-P2[3]*(V3[2]+V3[5]))))+M2*(F1[2]*(V3[3]+1j*(V3[4]))+F1[3]*(V3[2]-V3[5]))))
    return F2


def FFV1P0_3(F1, F2, COUP, M3, W3):
    V3 = wavefunctions.WaveFunction(size=6)
    V3[0] = +F1[0]+F2[0]
    V3[1] = +F1[1]+F2[1]
    P3 = [-complex(V3[0]).real, -complex(V3[1]).real, -
          complex(V3[1]).imag, -complex(V3[0]).imag]
    denom = COUP/(P3[0]**2-P3[1]**2-P3[2]**2-P3[3]**2 - M3 * (M3 - 1j * W3))
    V3[2] = denom*(-1j)*(F1[2]*F2[4]+F1[3]*F2[5]+F1[4]*F2[2]+F1[5]*F2[3])
    V3[3] = denom*(-1j)*(-F1[2]*F2[5]-F1[3]*F2[4]+F1[4]*F2[3]+F1[5]*F2[2])
    V3[4] = denom*(-1j)*(-1j*(F1[2]*F2[5]+F1[5]*F2[2]) +
                         1j*(F1[3]*F2[4]+F1[4]*F2[3]))
    V3[5] = denom*(-1j)*(-F1[2]*F2[4]-F1[5]*F2[3]+F1[3]*F2[5]+F1[4]*F2[2])
    return V3

    TMP0 = (F1[2]*(F2[4]*(V3[2]+V3[5])+F2[5]*(V3[3]+1j*(V3[4]))) +
            F1[3]*(F2[4]*(V3[3]-1j*(V3[4]))+F2[5]*(V3[2]-V3[5])))
    vertex = COUP*-1j * TMP0
    return vertex


def FFV2_0(F1, F2, V3, COUP):
    TMP0 = (F1[2]*(F2[4]*(V3[2]+V3[5])+F2[5]*(V3[3]+1j*(V3[4]))) +
            F1[3]*(F2[4]*(V3[3]-1j*(V3[4]))+F2[5]*(V3[2]-V3[5])))
    vertex = COUP*-1j * TMP0
    return vertex


def FFV2_2(F1, V3, COUP, M2, W2):
    F2 = wavefunctions.WaveFunction(size=6)
    F2[0] = +F1[0]+V3[0]
    F2[1] = +F1[1]+V3[1]
    P2 = [-complex(F2[0]).real, -complex(F2[1]).real, -
          complex(F2[1]).imag, -complex(F2[0]).imag]
    denom = COUP/(P2[0]**2-P2[1]**2-P2[2]**2-P2[3]**2 - M2 * (M2 - 1j * W2))
    F2[2] = denom*1j*(F1[2]*(P2[0]*(V3[2]+V3[5])+(P2[1]*(-1)*(V3[3]+1j*(V3[4]))+(P2[2]*(+1j*(V3[3])-V3[4])-P2[3]*(V3[2]+V3[5])))) +
                      F1[3]*(P2[0]*(V3[3]-1j*(V3[4]))+(P2[1]*(-V3[2]+V3[5])+(P2[2]*(+1j*(V3[2])-1j*(V3[5]))+P2[3]*(-V3[3]+1j*(V3[4]))))))
    F2[3] = denom*1j*(F1[2]*(P2[0]*(V3[3]+1j*(V3[4]))+(P2[1]*(-1)*(V3[2]+V3[5])+(P2[2]*(-1)*(+1j*(V3[2]+V3[5]))+P2[3]*(V3[3]+1j*(V3[4]))))
                             )+F1[3]*(P2[0]*(V3[2]-V3[5])+(P2[1]*(-V3[3]+1j*(V3[4]))+(P2[2]*(-1)*(+1j*(V3[3])+V3[4])+P2[3]*(V3[2]-V3[5])))))
    F2[4] = denom*-1j * M2*(F1[2]*(-1)*(V3[2]+V3[5])+F1[3]*(-V3[3]+1j*(V3[4])))
    F2[5] = denom*1j * M2*(F1[2]*(V3[3]+1j*(V3[4]))+F1[3]*(V3[2]-V3[5]))
    return F2
